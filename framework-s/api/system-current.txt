// Signature format: 2.0
package android.app.role {

  public interface OnRoleHoldersChangedListener {
    method public void onRoleHoldersChanged(@NonNull String, @NonNull android.os.UserHandle);
  }

  @Deprecated public abstract class RoleControllerService extends android.app.Service {
    ctor @Deprecated public RoleControllerService();
    method @Deprecated @WorkerThread public abstract boolean onAddRoleHolder(@NonNull String, @NonNull String, int);
    method @Deprecated @Nullable public final android.os.IBinder onBind(@Nullable android.content.Intent);
    method @Deprecated @WorkerThread public abstract boolean onClearRoleHolders(@NonNull String, int);
    method @Deprecated @WorkerThread public abstract boolean onGrantDefaultRoles();
    method @Deprecated public abstract boolean onIsApplicationQualifiedForRole(@NonNull String, @NonNull String);
    method @Deprecated public boolean onIsApplicationVisibleForRole(@NonNull String, @NonNull String);
    method @Deprecated public abstract boolean onIsRoleVisible(@NonNull String);
    method @Deprecated @WorkerThread public abstract boolean onRemoveRoleHolder(@NonNull String, @NonNull String, int);
    field @Deprecated public static final String SERVICE_INTERFACE = "android.app.role.RoleControllerService";
  }

  public final class RoleManager {
    method @RequiresPermission(android.Manifest.permission.OBSERVE_ROLE_HOLDERS) public void addOnRoleHoldersChangedListenerAsUser(@NonNull java.util.concurrent.Executor, @NonNull android.app.role.OnRoleHoldersChangedListener, @NonNull android.os.UserHandle);
    method @RequiresPermission(android.Manifest.permission.MANAGE_ROLE_HOLDERS) public void addRoleHolderAsUser(@NonNull String, @NonNull String, int, @NonNull android.os.UserHandle, @NonNull java.util.concurrent.Executor, @NonNull java.util.function.Consumer<java.lang.Boolean>);
    method @Deprecated @RequiresPermission("com.android.permissioncontroller.permission.MANAGE_ROLES_FROM_CONTROLLER") public boolean addRoleHolderFromController(@NonNull String, @NonNull String);
    method @RequiresPermission(android.Manifest.permission.MANAGE_ROLE_HOLDERS) public void clearRoleHoldersAsUser(@NonNull String, int, @NonNull android.os.UserHandle, @NonNull java.util.concurrent.Executor, @NonNull java.util.function.Consumer<java.lang.Boolean>);
    method @Deprecated @NonNull @RequiresPermission("com.android.permissioncontroller.permission.MANAGE_ROLES_FROM_CONTROLLER") public java.util.List<java.lang.String> getHeldRolesFromController(@NonNull String);
    method @NonNull @RequiresPermission(android.Manifest.permission.MANAGE_ROLE_HOLDERS) public java.util.List<java.lang.String> getRoleHolders(@NonNull String);
    method @NonNull @RequiresPermission(android.Manifest.permission.MANAGE_ROLE_HOLDERS) public java.util.List<java.lang.String> getRoleHoldersAsUser(@NonNull String, @NonNull android.os.UserHandle);
    method @RequiresPermission(android.Manifest.permission.MANAGE_ROLE_HOLDERS) public void isApplicationVisibleForRole(@NonNull String, @NonNull String, @NonNull java.util.concurrent.Executor, @NonNull java.util.function.Consumer<java.lang.Boolean>);
    method @RequiresPermission(android.Manifest.permission.MANAGE_ROLE_HOLDERS) public boolean isBypassingRoleQualification();
    method @RequiresPermission(android.Manifest.permission.MANAGE_ROLE_HOLDERS) public void isRoleVisible(@NonNull String, @NonNull java.util.concurrent.Executor, @NonNull java.util.function.Consumer<java.lang.Boolean>);
    method @RequiresPermission(android.Manifest.permission.OBSERVE_ROLE_HOLDERS) public void removeOnRoleHoldersChangedListenerAsUser(@NonNull android.app.role.OnRoleHoldersChangedListener, @NonNull android.os.UserHandle);
    method @RequiresPermission(android.Manifest.permission.MANAGE_ROLE_HOLDERS) public void removeRoleHolderAsUser(@NonNull String, @NonNull String, int, @NonNull android.os.UserHandle, @NonNull java.util.concurrent.Executor, @NonNull java.util.function.Consumer<java.lang.Boolean>);
    method @Deprecated @RequiresPermission("com.android.permissioncontroller.permission.MANAGE_ROLES_FROM_CONTROLLER") public boolean removeRoleHolderFromController(@NonNull String, @NonNull String);
    method @RequiresPermission(android.Manifest.permission.BYPASS_ROLE_QUALIFICATION) public void setBypassingRoleQualification(boolean);
    method @Deprecated @RequiresPermission("com.android.permissioncontroller.permission.MANAGE_ROLES_FROM_CONTROLLER") public void setRoleNamesFromController(@NonNull java.util.List<java.lang.String>);
    field public static final int MANAGE_HOLDERS_FLAG_DONT_KILL_APP = 1; // 0x1
    field public static final String ROLE_SYSTEM_ACTIVITY_RECOGNIZER = "android.app.role.SYSTEM_ACTIVITY_RECOGNIZER";
    field public static final String ROLE_SYSTEM_SUPERVISION = "android.app.role.SYSTEM_SUPERVISION";
    field public static final String ROLE_SYSTEM_WELLBEING = "android.app.role.SYSTEM_WELLBEING";
  }

}

package android.safetycenter {

  public final class SafetyCenterManager {
    method @Nullable @RequiresPermission(android.Manifest.permission.SEND_SAFETY_CENTER_UPDATE) public android.safetycenter.SafetySourceData getLastSafetyCenterUpdate(@NonNull String);
    method @RequiresPermission(anyOf={android.Manifest.permission.READ_SAFETY_CENTER_STATUS, android.Manifest.permission.SEND_SAFETY_CENTER_UPDATE}) public boolean isSafetyCenterEnabled();
    method @RequiresPermission(android.Manifest.permission.SEND_SAFETY_CENTER_UPDATE) public void sendSafetyCenterUpdate(@NonNull android.safetycenter.SafetySourceData);
  }

  public final class SafetySourceData implements android.os.Parcelable {
    method public int describeContents();
    method @NonNull public String getId();
    method @NonNull public java.util.List<android.safetycenter.SafetySourceIssue> getIssues();
    method @Nullable public android.safetycenter.SafetySourceStatus getStatus();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.safetycenter.SafetySourceData> CREATOR;
  }

  public static final class SafetySourceData.Builder {
    ctor public SafetySourceData.Builder(@NonNull String);
    method @NonNull public android.safetycenter.SafetySourceData.Builder addIssue(@NonNull android.safetycenter.SafetySourceIssue);
    method @NonNull public android.safetycenter.SafetySourceData build();
    method @NonNull public android.safetycenter.SafetySourceData.Builder clearIssues();
    method @NonNull public android.safetycenter.SafetySourceData.Builder setStatus(@Nullable android.safetycenter.SafetySourceStatus);
  }

  public final class SafetySourceIssue implements android.os.Parcelable {
    method public int describeContents();
    method @NonNull public java.util.List<android.safetycenter.SafetySourceIssue.Action> getActions();
    method @NonNull public String getId();
    method @NonNull public String getIssueCategory();
    method @Nullable public android.app.PendingIntent getOnDismissPendingIntent();
    method public int getSeverityLevel();
    method @Nullable public CharSequence getSubtitle();
    method @NonNull public CharSequence getSummary();
    method @NonNull public CharSequence getTitle();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.safetycenter.SafetySourceIssue> CREATOR;
    field public static final String ISSUE_CATEGORY_ACCOUNT = "issue_category_account";
    field public static final String ISSUE_CATEGORY_DEVICE = "issue_category_device";
    field public static final String ISSUE_CATEGORY_GENERAL = "issue_category_general";
    field public static final int SEVERITY_LEVEL_CRITICAL_WARNING = 400; // 0x190
    field public static final int SEVERITY_LEVEL_INFORMATION = 200; // 0xc8
    field public static final int SEVERITY_LEVEL_RECOMMENDATION = 300; // 0x12c
  }

  public static final class SafetySourceIssue.Action implements android.os.Parcelable {
    method public int describeContents();
    method @NonNull public CharSequence getLabel();
    method @NonNull public android.app.PendingIntent getPendingIntent();
    method public boolean isResolving();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.safetycenter.SafetySourceIssue.Action> CREATOR;
  }

  public static final class SafetySourceIssue.Action.Builder {
    ctor public SafetySourceIssue.Action.Builder(@NonNull CharSequence, @NonNull android.app.PendingIntent);
    method @NonNull public android.safetycenter.SafetySourceIssue.Action build();
    method @NonNull public android.safetycenter.SafetySourceIssue.Action.Builder setResolving(boolean);
  }

  public static final class SafetySourceIssue.Builder {
    ctor public SafetySourceIssue.Builder(@NonNull String, @NonNull CharSequence, @NonNull CharSequence, int);
    method @NonNull public android.safetycenter.SafetySourceIssue.Builder addAction(@NonNull android.safetycenter.SafetySourceIssue.Action);
    method @NonNull public android.safetycenter.SafetySourceIssue build();
    method @NonNull public android.safetycenter.SafetySourceIssue.Builder clearActions();
    method @NonNull public android.safetycenter.SafetySourceIssue.Builder setIssueCategory(@NonNull String);
    method @NonNull public android.safetycenter.SafetySourceIssue.Builder setOnDismissPendingIntent(@Nullable android.app.PendingIntent);
    method @NonNull public android.safetycenter.SafetySourceIssue.Builder setSubtitle(@Nullable CharSequence);
  }

  public final class SafetySourceStatus implements android.os.Parcelable {
    method public int describeContents();
    method @Nullable public android.safetycenter.SafetySourceStatus.IconAction getIconAction();
    method @NonNull public android.app.PendingIntent getPendingIntent();
    method public int getStatusLevel();
    method @NonNull public CharSequence getSummary();
    method @NonNull public CharSequence getTitle();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.safetycenter.SafetySourceStatus> CREATOR;
    field public static final int STATUS_LEVEL_CRITICAL_WARNING = 400; // 0x190
    field public static final int STATUS_LEVEL_NONE = 100; // 0x64
    field public static final int STATUS_LEVEL_NO_ISSUES = 200; // 0xc8
    field public static final int STATUS_LEVEL_RECOMMENDATION = 300; // 0x12c
  }

  public static final class SafetySourceStatus.Builder {
    ctor public SafetySourceStatus.Builder(@NonNull CharSequence, @NonNull CharSequence, int, @NonNull android.app.PendingIntent);
    method @NonNull public android.safetycenter.SafetySourceStatus build();
    method @NonNull public android.safetycenter.SafetySourceStatus.Builder setIconAction(@Nullable android.safetycenter.SafetySourceStatus.IconAction);
  }

  public static final class SafetySourceStatus.IconAction implements android.os.Parcelable {
    ctor public SafetySourceStatus.IconAction(@NonNull String, @NonNull android.app.PendingIntent);
    method public int describeContents();
    method @NonNull public String getIconType();
    method @NonNull public android.app.PendingIntent getPendingIntent();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.safetycenter.SafetySourceStatus.IconAction> CREATOR;
    field public static final String ICON_TYPE_GEAR = "icon_type_gear";
    field public static final String ICON_TYPE_INFO = "icon_type_info";
  }

}

